---
title: "Syntax Highlighting Test"
description: "Test page to verify theme-aware syntax highlighting is working correctly"
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Syntax Highlighting Test</title>
		
		<!-- Theme CSS -->
		<link rel="stylesheet" href="/portfolio/src/styles/global.css" />
		<link rel="stylesheet" href="/portfolio/src/styles/themes.css" />
		<link rel="stylesheet" href="/portfolio/src/styles/syntax-themes.css" />
		
		<!-- Theme initialization -->
		<script is:inline>
			// Quick theme initialization
			const theme = localStorage.getItem('selected-theme') || 'default';
			document.documentElement.classList.add(`theme-${theme}`);
		</script>
	</head>
	<body>
		<main style="padding: 2rem; max-width: 1200px; margin: 0 auto;">
			<h1>Syntax Highlighting Theme Test</h1>
			<p>This page tests whether syntax highlighting adapts to different color themes.</p>
			
			<div style="margin: 2rem 0; display: flex; gap: 1rem; flex-wrap: wrap;">
				<button onclick="setTheme('default')">Default Purple</button>
				<button onclick="setTheme('ocean-blue')">Ocean Blue</button>
				<button onclick="setTheme('forest-green')">Forest Green</button>
				<button onclick="setTheme('catppuccin-latte')">Catppuccin Latte</button>
				<button onclick="setTheme('catppuccin-mocha')">Catppuccin Mocha</button>
			</div>

			<h2>SQL Example</h2>
			<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;" tabindex="0" data-language="sql">
				<code>
					<span class="line"><span style="color:#6A737D">-- Create an index on frequently queried columns</span></span>
					<span class="line"><span style="color:#F97583">CREATE</span><span style="color:#F97583"> INDEX</span><span style="color:#B392F0"> idx_customer_email</span><span style="color:#F97583"> ON</span><span style="color:#E1E4E8"> customers(email);</span></span>
					<span class="line"><span style="color:#F97583">CREATE</span><span style="color:#F97583"> INDEX</span><span style="color:#B392F0"> idx_order_date</span><span style="color:#F97583"> ON</span><span style="color:#E1E4E8"> orders(order_date);</span></span>
					<span class="line"></span>
					<span class="line"><span style="color:#6A737D">-- Good: Uses index effectively</span></span>
					<span class="line"><span style="color:#F97583">SELECT</span><span style="color:#F97583"> *</span><span style="color:#F97583"> FROM</span><span style="color:#E1E4E8"> orders </span></span>
					<span class="line"><span style="color:#F97583">WHERE</span><span style="color:#E1E4E8"> customer_id </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 12345</span><span style="color:#E1E4E8"> </span></span>
					<span class="line"><span style="color:#F97583">  AND</span><span style="color:#E1E4E8"> order_date </span><span style="color:#F97583">>=</span><span style="color:#9ECBFF"> '2024-01-01'</span><span style="color:#E1E4E8">;</span></span>
				</code>
			</pre>

			<h2>Python Example</h2>
			<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;" tabindex="0" data-language="python">
				<code>
					<span class="line"><span style="color:#6A737D"># Data analysis with pandas</span></span>
					<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> pandas </span><span style="color:#F97583">as</span><span style="color:#E1E4E8"> pd</span></span>
					<span class="line"><span style="color:#F97583">import</span><span style="color:#E1E4E8"> numpy </span><span style="color:#F97583">as</span><span style="color:#E1E4E8"> np</span></span>
					<span class="line"><span style="color:#F97583">from</span><span style="color:#E1E4E8"> typing </span><span style="color:#F97583">import</span><span style="color:#E1E4E8"> Dict, List, Optional</span></span>
					<span class="line"></span>
					<span class="line"><span style="color:#F97583">def</span><span style="color:#B392F0"> analyze_data</span><span style="color:#E1E4E8">(df: pd.DataFrame, </span><span style="color:#FFAB70">columns</span><span style="color:#E1E4E8">: List[str]) -&gt; Dict[str, float]:</span></span>
					<span class="line">    <span style="color:#9ECBFF">"""</span></span>
					<span class="line">    <span style="color:#9ECBFF">Analyze numeric columns in a DataFrame</span></span>
					<span class="line">    <span style="color:#9ECBFF">"""</span></span>
					<span class="line">    <span style="color:#FFAB70">results</span><span style="color:#E1E4E8"> = </span><span style="color:#E1E4E8">{}</span></span>
					<span class="line">    </span>
					<span class="line">    <span style="color:#F97583">for</span><span style="color:#E1E4E8"> col </span><span style="color:#F97583">in</span><span style="color:#E1E4E8"> columns:</span></span>
					<span class="line">        <span style="color:#F97583">if</span><span style="color:#E1E4E8"> col </span><span style="color:#F97583">in</span><span style="color:#E1E4E8"> df.columns:</span></span>
					<span class="line">            <span style="color:#FFAB70">results</span><span style="color:#E1E4E8">[col] = df[col].mean()</span></span>
					<span class="line">    </span>
					<span class="line">    <span style="color:#F97583">return</span><span style="color:#E1E4E8"> results</span></span>
				</code>
			</pre>

			<h2>JavaScript Example</h2>
			<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;" tabindex="0" data-language="javascript">
				<code>
					<span class="line"><span style="color:#6A737D">// Modern JavaScript with async/await</span></span>
					<span class="line"><span style="color:#F97583">class</span><span style="color:#B392F0"> DataProcessor</span><span style="color:#E1E4E8"> {</span></span>
					<span class="line">    <span style="color:#B392F0">constructor</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">config</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {}) {</span></span>
					<span class="line">        <span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#FFAB70">apiKey</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> config.apiKey;</span></span>
					<span class="line">        <span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#FFAB70">baseUrl</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> config.baseUrl </span><span style="color:#F97583">||</span><span style="color:#9ECBFF"> 'https://api.example.com'</span><span style="color:#E1E4E8">;</span></span>
					<span class="line">    <span style="color:#E1E4E8">}</span></span>
					<span class="line"></span>
					<span class="line">    <span style="color:#F97583">async</span><span style="color:#B392F0"> fetchData</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">endpoint</span><span style="color:#E1E4E8">) {</span></span>
					<span class="line">        <span style="color:#F97583">const</span><span style="color:#79B8FF"> response</span><span style="color:#F97583"> =</span><span style="color:#F97583"> await</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`</span><span style="color:#79B8FF">${</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.</span><span style="color:#FFAB70">baseUrl</span><span style="color:#79B8FF">}</span><span style="color:#9ECBFF">/</span><span style="color:#79B8FF">${</span><span style="color:#FFAB70">endpoint</span><span style="color:#79B8FF">}</span><span style="color:#9ECBFF">`</span><span style="color:#E1E4E8">);</span></span>
					<span class="line">        <span style="color:#F97583">return</span><span style="color:#F97583"> await</span><span style="color:#E1E4E8"> response.</span><span style="color:#B392F0">json</span><span style="color:#E1E4E8">();</span></span>
					<span class="line">    <span style="color:#E1E4E8">}</span></span>
					<span class="line"><span style="color:#E1E4E8">}</span></span>
				</code>
			</pre>

			<script>
				function setTheme(themeId) {
					// Remove existing theme classes
					document.documentElement.classList.remove('theme-default', 'theme-ocean-blue', 'theme-forest-green', 'theme-catppuccin-latte', 'theme-catppuccin-mocha');
					
					// Add new theme class
					document.documentElement.classList.add(`theme-${themeId}`);
					
					// Store in localStorage
					localStorage.setItem('selected-theme', themeId);
					
					console.log(`Switched to theme: ${themeId}`);
				}
			</script>
		</main>
	</body>
</html>