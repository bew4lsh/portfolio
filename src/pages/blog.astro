---
import { getCollection } from 'astro:content';

import BaseLayout from '../layouts/BaseLayout.astro';

import ContactCTA from '../components/ContactCTA.astro';
import Hero from '../components/Hero.astro';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';

// Load and process blog posts with error handling
let posts: Array<any> = [];
let featuredPosts: Array<any> = [];
let regularPosts: Array<any> = [];

try {
	const allPosts = await getCollection('blog');
	
	posts = allPosts
		.filter(post => post?.data && !post.data.draft && post.data.publishDate) // Ensure valid data
		.sort((a, b) => {
			const dateA = new Date(a.data.publishDate);
			const dateB = new Date(b.data.publishDate);
			return dateB.valueOf() - dateA.valueOf();
		});

	featuredPosts = posts.filter(post => post.data.featured);
	regularPosts = posts.filter(post => !post.data.featured);
} catch (error) {
	console.error('Error loading blog posts:', error);
	// Posts arrays remain empty, but site won't crash
}
---

<BaseLayout
	title="Blog | Data Analysis & Insights"
	description="Insights and tutorials on data analysis, visualization, and data science techniques."
>
	<div class="stack gap-20">
		<main class="wrapper stack gap-8">
			<Hero
				title="Blog"
				tagline="Sharing insights and tutorials on data analysis, visualization, and data science."
				align="start"
			/>
			
			{featuredPosts.length > 0 && (
				<section class="section with-background bg-variant">
					<header class="section-header stack gap-2 lg:gap-4">
						<h2>Featured Posts</h2>
						<p>Highlighted articles and deep-dive tutorials</p>
					</header>
					<div class="gallery">
						{featuredPosts.map((post) => (
							<article class="post-card">
								<a href={`${import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/'}blog/${post.id.replace('.md', '')}/`}>
									{post.data.img && (
										<img
											src={post.data.img}
											alt={post.data.img_alt || ''}
											loading="lazy"
											decoding="async"
										/>
									)}
									<div class="post-content">
										<h3>{post.data.title}</h3>
										<p>{post.data.description}</p>
										<div class="post-meta">
											<time datetime={post.data.publishDate.toISOString()}>
												{post.data.publishDate.toLocaleDateString('en-US', {
													year: 'numeric',
													month: 'long',
													day: 'numeric',
												})}
											</time>
											{post.data.category && <span class="category">{post.data.category}</span>}
										</div>
										<div class="tags">
											{post.data.tags.map((tag) => (
												<Pill>{tag}</Pill>
											))}
										</div>
									</div>
								</a>
							</article>
						))}
					</div>
				</section>
			)}

			<section class="section with-background with-cta">
				<header class="section-header stack gap-2 lg:gap-4">
					<h2>All Posts</h2>
					<p>All articles and tutorials</p>
				</header>
				<div class="gallery">
					{regularPosts.map((post) => (
						<article class="post-card">
							<a href={`${import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/'}blog/${post.id.replace('.md', '')}/`}>
								{post.data.img && (
									<img
										src={post.data.img}
										alt={post.data.img_alt || ''}
										loading="lazy"
										decoding="async"
									/>
								)}
								<div class="post-content">
									<h3>{post.data.title}</h3>
									<p>{post.data.description}</p>
									<div class="post-meta">
										<time datetime={post.data.publishDate.toISOString()}>
											{post.data.publishDate.toLocaleDateString('en-US', {
												year: 'numeric',
												month: 'long',
												day: 'numeric',
											})}
										</time>
										{post.data.category && <span class="category">{post.data.category}</span>}
									</div>
									<div class="tags">
										{post.data.tags.map((tag) => (
											<Pill>{tag}</Pill>
										))}
									</div>
								</div>
							</a>
						</article>
					))}
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
	.post-card {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		padding: 1.5rem;
		background: var(--gray-999);
		border: 1px solid var(--gray-800);
		border-radius: 0.75rem;
		transition: all 0.2s ease;
	}

	.post-card:hover {
		border-color: var(--accent-regular);
		transform: translateY(-2px);
	}

	.post-card a {
		text-decoration: none;
		color: inherit;
	}

	.post-card img {
		width: 100%;
		height: 200px;
		object-fit: cover;
		border-radius: 0.5rem;
	}

	.post-content {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.post-content h3 {
		color: var(--accent-text-over);
		margin: 0;
		font-size: var(--text-lg);
	}

	.post-content p {
		color: var(--gray-300);
		margin: 0;
		flex: 1;
	}

	.post-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		gap: 1rem;
		font-size: var(--text-sm);
		color: var(--gray-400);
		margin-top: auto;
	}

	.category {
		background: var(--accent-regular);
		color: var(--accent-text-over);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-size: var(--text-xs);
	}

	.tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-top: 0.5rem;
	}

	.gallery {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 2rem;
		margin-top: 2rem;
	}

	/* Mobile adjustments */
	@media (max-width: 50em) {
		.gallery {
			grid-template-columns: 1fr;
		}
		
		.post-meta {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.5rem;
		}
	}
</style>