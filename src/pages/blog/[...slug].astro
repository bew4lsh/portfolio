---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';

interface Props {
	entry: CollectionEntry<'blog'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/blog/
export async function getStaticPaths() {
	try {
		const posts = await getCollection('blog');
		return posts
			.filter(entry => !entry.data.draft) // Filter out draft posts
			.map((entry) => ({
				params: { slug: entry.id.replace('.md', '') }, // Use id for the slug
				props: { entry },
			}));
	} catch (error) {
		console.error('Error loading blog posts:', error);
		return [];
	}
}

const { entry } = Astro.props;

// Validate required data
if (!entry || !entry.data) {
	throw new Error('Blog post data is missing');
}

const { Content } = await render(entry);

// Ensure required fields exist with fallbacks
const title = entry.data.title || 'Untitled Post';
const description = entry.data.description || 'No description available';
const publishDate = entry.data.publishDate || new Date();
const tags = entry.data.tags || [];
const category = entry.data.category;
const updatedDate = entry.data.updatedDate;
const img = entry.data.img;
const imgAlt = entry.data.img_alt || `Cover image for ${title}`;
---

<BaseLayout title={title} description={description}>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href={`${import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/'}blog/`}>
						<Icon icon="arrow-left" /> Blog
					</a>
					<Hero title={title} align="start">
						<div class="details">
							{tags.length > 0 && (
								<div class="tags">
									{tags.map((t) => <Pill>{t}</Pill>)}
								</div>
							)}
							<div class="post-meta">
								<time datetime={publishDate.toISOString()}>
									{publishDate.toLocaleDateString('en-US', {
										year: 'numeric',
										month: 'long',
										day: 'numeric',
									})}
								</time>
								{updatedDate && (
									<span class="updated">
										Updated: {updatedDate.toLocaleDateString('en-US', {
											year: 'numeric',
											month: 'long',
											day: 'numeric',
										})}
									</span>
								)}
								{category && (
									<span class="category">{category}</span>
								)}
							</div>
							<p class="description">{description}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="stack gap-10 content">
					{img && (
						<img
							src={img}
							alt={imgAlt}
							class="hero-image"
						/>
					)}
					<div class="content">
						<Content />
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.back-link svg {
		width: 1rem;
		height: 1rem;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
	}

	.post-meta {
		display: flex;
		gap: 1rem;
		flex-wrap: wrap;
		align-items: center;
		font-size: var(--text-sm);
		color: var(--gray-400);
	}

	.updated {
		font-style: italic;
	}

	.category {
		background: var(--accent-regular);
		color: var(--accent-text-over);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-size: var(--text-xs);
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.hero-image {
		width: 100%;
		max-height: 400px;
		object-fit: cover;
		border-radius: 1rem;
		box-shadow: var(--shadow-sm);
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
		word-wrap: break-word;
		overflow-wrap: break-word;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0 0.5rem;
		color: var(--accent-text-over);
	}

	.content :global(img) {
		border-radius: 1rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
		max-width: 100%;
		height: auto;
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.content :global(a) {
		color: var(--accent-regular);
	}

	.content :global(a:hover),
	.content :global(a:focus) {
		color: var(--accent-text-over);
	}

	/* Code blocks */
	.content :global(pre) {
		padding: 1.5rem;
		border-radius: 0.75rem;
		border: 1px solid var(--gray-800);
		overflow-x: auto;
		background-color: var(--gray-999-basis);
	}

	.content :global(code) {
		font-family: var(--font-mono);
		font-size: var(--text-sm);
	}

	.content :global(:not(pre) > code) {
		background: var(--gray-800);
		color: var(--accent-text-over);
		padding: 0.125em 0.375em;
		border-radius: 0.25rem;
		font-size: 0.875em;
	}

	/* Tables */
	.content :global(table) {
		width: 100%;
		border-collapse: collapse;
		margin: 1.5rem 0;
		border-radius: 0.5rem;
		overflow: hidden;
		border: 1px solid var(--gray-800);
	}

	/* Responsive table wrapper */
	.content :global(table) {
		display: block;
		overflow-x: auto;
		/* Remove white-space: nowrap to allow text wrapping in cells */
		word-wrap: break-word;
		overflow-wrap: break-word;
	}

	@media (min-width: 50em) {
		.content :global(table) {
			display: table;
			overflow-x: visible;
			white-space: normal;
		}
	}

	.content :global(th),
	.content :global(td) {
		padding: 0.75rem;
		text-align: left;
		border-bottom: 1px solid var(--gray-800);
		/* Ensure table cell content can wrap */
		word-wrap: break-word;
		overflow-wrap: break-word;
		hyphens: auto;
	}

	.content :global(th) {
		background: var(--gray-900);
		font-weight: 600;
		color: var(--accent-text-over);
	}

	.content :global(tr:hover) {
		background: var(--gray-900);
	}

	/* Mobile-specific adjustments */
	@media (max-width: 50em) {
		.content {
			padding: 0 1rem;
			/* Ensure content doesn't overflow on mobile */
			max-width: calc(100vw - 2rem);
			overflow-wrap: break-word;
		}
		
		.content :global(pre) {
			margin: 1rem -1rem;
			border-radius: 0;
			/* Ensure code blocks fit on mobile */
			font-size: 0.8rem;
			white-space: pre-wrap;
			word-break: break-all;
		}
		
		.content :global(table) {
			font-size: 0.875rem;
			/* Better mobile table handling */
			min-width: auto;
		}
		
		/* Mobile-friendly table cells */
		.content :global(th),
		.content :global(td) {
			padding: 0.5rem;
			font-size: 0.875rem;
			/* Allow aggressive text breaking in small cells */
			word-break: break-word;
			hyphens: auto;
		}
		
		/* Handle long URLs and code in mobile */
		.content :global(a) {
			word-break: break-all;
			overflow-wrap: break-word;
		}
		
		.content :global(code) {
			word-break: break-all;
			white-space: pre-wrap;
		}
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>