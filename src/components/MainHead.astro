---
import '../styles/global.css';
import ThemeStyles from './ThemeStyles.astro';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Lia: Data Analyst Portfolio',
	description = 'Data analyst portfolio showcasing insights, visualizations, and technical solutions',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title="Lia | Data Analyst Blog" href="/portfolio/rss.xml" />

<!-- Sitemap -->
<link rel="sitemap" href="/portfolio/sitemap-index.xml" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<ThemeStyles />

<!-- Plotly.js for interactive charts -->
<script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
<script is:inline>
	// Unified theme initialization - instant & blocking to prevent flash
	(function() {
		// Get stored preferences
		const getDarkMode = () => {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme') === 'dark';
			}
			return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
		};
		
		const getColorTheme = () => {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('selected-theme')) {
				return localStorage.getItem('selected-theme');
			}
			return 'default';
		};
		
		// Apply themes immediately
		const isDark = getDarkMode();
		const colorTheme = getColorTheme();
		
		const classList = document.documentElement.classList;
		classList.toggle('theme-dark', isDark);
		classList.add(`theme-${colorTheme}`);
		
		// Basic persistence for initial load (ThemeManager will take over when components load)
		if (typeof localStorage !== 'undefined') {
			const observer = new MutationObserver(() => {
				const currentDark = document.documentElement.classList.contains('theme-dark');
				const currentColorTheme = Array.from(document.documentElement.classList)
					.find(cls => cls.startsWith('theme-') && cls !== 'theme-dark')
					?.replace('theme-', '') || 'default';
				
				localStorage.setItem('theme', currentDark ? 'dark' : 'light');
				localStorage.setItem('selected-theme', currentColorTheme);
			});
			observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
		}
	})();
</script>
