---
import '../styles/global.css';
import '../styles/themes.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Lia: Data Analyst Portfolio',
	description = 'Data analyst portfolio showcasing insights, visualizations, and technical solutions',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title="Lia | Data Analyst Blog" href={`${import.meta.env.BASE_URL}rss.xml`} />

<!-- Sitemap -->
<link rel="sitemap" href={`${import.meta.env.BASE_URL}sitemap-index.xml`} />

<link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>


<!-- Theme initialization - Critical path to prevent FOUC -->
<script is:inline>
	// IMMEDIATE theme initialization - runs before any CSS is processed
	(function() {
		// Robust localStorage access with comprehensive error handling
		const getStoredValue = (key, fallback) => {
			try {
				// Test localStorage availability first
				if (typeof localStorage === 'undefined') return fallback;
				
				// Attempt to read value
				const value = localStorage.getItem(key);
				return value || fallback;
			} catch (error) {
				// Handle various localStorage errors (quota exceeded, private browsing, etc.)
				console.warn(`Theme initialization: localStorage access failed for "${key}":`, error.name);
				return fallback;
			}
		};
		
		// Sanitize theme ID to prevent CSS injection
		const sanitizeThemeId = (themeId) => {
			return String(themeId).replace(/[^a-zA-Z0-9-_]/g, '') || 'default';
		};
		
		// Get preferences with comprehensive fallbacks
		const systemDarkPreference = window.matchMedia?.('(prefers-color-scheme: dark)').matches;
		const darkPreference = getStoredValue('theme', systemDarkPreference ? 'dark' : 'light');
		const rawColorTheme = getStoredValue('selected-theme', 'default');
		const colorTheme = sanitizeThemeId(rawColorTheme);
		
		// Apply classes immediately with error boundary
		try {
			const docClass = document.documentElement.classList;
			if (darkPreference === 'dark') docClass.add('theme-dark');
			docClass.add(`theme-${colorTheme}`);
			
			// Set loading state indicator
			document.documentElement.style.setProperty('--theme-loading', 'false');
		} catch (error) {
			console.error('Critical theme initialization error:', error);
			// Fallback: ensure at least default theme is applied
			document.documentElement.className += ' theme-default';
		}
	})();
</script>

<!-- Plotly.js for interactive charts -->
<script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
